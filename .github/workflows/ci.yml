name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-node-and-e2e:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set lowercase owner
        run: echo "OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: api/package.json

      - name: Install dependencies (api)
        working-directory: api
        run: npm ci

      - name: npm audit (high and critical)
        working-directory: api
        run: |
          npm audit --audit-level=high || (echo "npm audit found issues" && exit 1)

      - name: Trivy FS scan (repo)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-fs.sarif'
          severity: 'HIGH,CRITICAL'

      - name: Upload Trivy FS results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-fs.sarif'
          category: 'trivy-fs'

      - name: Run unit/mocked integration tests
        env:
          NODE_ENV: test
          TZ: Europe/Paris
        working-directory: api
        run: npm run test:ci

      - name: Build and start Docker Compose
        run: |
          docker compose version
          docker compose up -d --build

      - name: Wait for API health
        run: |
          tries=40
          until curl -fsS http://localhost:5001/health; do
            tries=$((tries-1))
            if [ $tries -le 0 ]; then
              echo "API did not become healthy in time" >&2
              docker compose logs --no-color api postgres || true
              exit 1
            fi
            sleep 1
          done

      - name: Run E2E tests (real API + Postgres)
        env:
          API_BASE: http://localhost:5001
          TZ: Europe/Paris
        working-directory: api
        run: npm run test:e2e

      - name: Compose logs on failure
        if: failure()
        run: docker compose logs --no-color api postgres || true

      - name: Tear down
        if: always()
        run: docker compose down -v

      - name: Extract metadata (tags, labels) for GHCR
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ env.OWNER_LC }}/devops-ninja-api
          tags: |
            type=sha
            type=ref,event=branch
            type=semver,pattern={{version}}

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.OWNER_LC }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image SHA tag env
        run: echo "IMAGE_SHA_TAG=ghcr.io/${OWNER_LC}/devops-ninja-api:sha-${GITHUB_SHA}" >> $GITHUB_ENV

      - name: Build and push API image to GHCR
        uses: docker/build-push-action@v6
        with:
          context: ./api
          file: ./api/Dockerfile
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ env.IMAGE_SHA_TAG }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Trivy Image scan (GHCR)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.IMAGE_SHA_TAG }}
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-image.sarif'
          severity: 'HIGH,CRITICAL'

      - name: Upload Trivy Image results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-image.sarif'
          category: 'trivy-image'

  deploy-staging:
    needs: [test-node-and-e2e]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && secrets.SSH_HOST != ''
    steps:
      - name: Prepare deploy variables
        run: |
          echo "OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV
          echo "IMAGE_SHA_TAG=ghcr.io/${GITHUB_REPOSITORY_OWNER,,}/devops-ninja-api:sha-${GITHUB_SHA}" >> $GITHUB_ENV

      - name: SSH known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Copy compose and Caddyfile to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "docker-compose.staging.yml,caddy/Caddyfile"
          target: "~/derniermetro-staging"

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.1.0
        env:
          IMAGE_SHA_TAG: ${{ env.IMAGE_SHA_TAG }}
          STAGING_DOMAIN: ${{ secrets.STAGING_DOMAIN }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -euo pipefail
            cd ~/derniermetro-staging
            echo "Deploying $IMAGE_SHA_TAG"
            docker login ghcr.io -u "${GITHUB_REPOSITORY_OWNER,,}" -p ${{ secrets.GITHUB_TOKEN }}
            cat > .env <<EOF
            STAGING_DOMAIN=${STAGING_DOMAIN}
            API_IMAGE=${IMAGE_SHA_TAG}
            DB_USER=${DB_USER}
            DB_PASSWORD=${DB_PASSWORD}
            DB_NAME=${DB_NAME}
            EOF
            docker compose -f docker-compose.staging.yml pull
            docker compose -f docker-compose.staging.yml up -d


